{\rtf1\ansi\ansicpg1252\cocoartf2636
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue255;\red255\green255\blue254;\red0\green0\blue0;
\red144\green1\blue18;\red107\green0\blue1;\red15\green112\blue1;\red19\green119\blue72;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c100000;\cssrgb\c100000\c100000\c99608;\cssrgb\c0\c0\c0;
\cssrgb\c63922\c8235\c8235;\cssrgb\c50196\c0\c0;\cssrgb\c0\c50196\c0;\cssrgb\c3529\c52941\c35294;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 import\cf0 \strokec4  functions_framework\cb1 \
\cf2 \cb3 \strokec2 import\cf0 \strokec4  io\cb1 \
\cf2 \cb3 \strokec2 from\cf0 \strokec4  flask \cf2 \strokec2 import\cf0 \strokec4  jsonify, make_response\cb1 \
\cf2 \cb3 \strokec2 from\cf0 \strokec4  ClaudeApi \cf2 \strokec2 import\cf0 \strokec4  extract_pdf_text, elaborate_on_topic, generate_quiz_and_outline\cb1 \
\cf2 \cb3 \strokec2 from\cf0 \strokec4  google.cloud \cf2 \strokec2 import\cf0 \strokec4  storage\cb1 \
\cf2 \cb3 \strokec2 import\cf0 \strokec4  os\cb1 \
\
\cf2 \cb3 \strokec2 def\cf0 \strokec4  get_pdf_data_from_storage(fileName):\cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3     bucket_name = \cf5 \strokec5 "my_pdf_bucket1"\cf0 \cb1 \strokec4 \
\cb3     \cb1 \
\cb3     \cf2 \strokec2 try\cf0 \strokec4 :\cb1 \
\cb3         storage_client = storage.Client()\cb1 \
\cb3         bucket = storage_client.bucket(bucket_name)\cb1 \
\cb3         blob = bucket.blob(fileName)\cb1 \
\cb3         \cb1 \
\cb3         pdf_data = blob.download_as_bytes()\cb1 \
\cb3         pdf_data_io = io.BytesIO(pdf_data)\cb1 \
\cb3         \cf2 \strokec2 return\cf0 \strokec4  pdf_data_io\cb1 \
\cb3     \cb1 \
\cb3     \cf2 \strokec2 except\cf0 \strokec4  Exception \cf2 \strokec2 as\cf0 \strokec4  e:\cb1 \
\cb3         \cf2 \strokec2 print\cf0 \strokec4 (f\cf5 \strokec5 "Error accessing cloud storage: \{e\}"\cf0 \strokec4 )\cb1 \
\cb3         \cf2 \strokec2 raise\cf0 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 @functions_framework\cf0 \strokec4 .http\cb1 \
\cf6 \cb3 \strokec6 @functions_framework\cf0 \strokec4 .http\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 def\cf0 \strokec4  hello_http(request):\cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3     \cf2 \strokec2 try\cf0 \strokec4 :\cb1 \
\cb3         file_path = \cf5 \strokec5 "results.txt"\cf0 \cb1 \strokec4 \
\cb3         \cf2 \strokec2 if\cf0 \strokec4  os.path.exists(file_path):\cb1 \
\cb3             \cf2 \strokec2 with\cf0 \strokec4  \cf2 \strokec2 open\cf0 \strokec4 (file_path, \cf5 \strokec5 "r"\cf0 \strokec4 ) \cf2 \strokec2 as\cf0 \strokec4  \cf2 \strokec2 file\cf0 \strokec4 :\cb1 \
\cb3                 content = \cf2 \strokec2 file\cf0 \strokec4 .read()\cb1 \
\cb3             \cf7 \strokec7 # Return the content as a plain text HTTP response\cf0 \cb1 \strokec4 \
\cb3             response = make_response(content, \cf8 \strokec8 200\cf0 \strokec4 )\cb1 \
\cb3             response.headers[\cf5 \strokec5 'Content-Type'\cf0 \strokec4 ] = \cf5 \strokec5 'text/plain'\cf0 \cb1 \strokec4 \
\cb3             \cf2 \strokec2 return\cf0 \strokec4  response\cb1 \
\cb3         \cf2 \strokec2 else\cf0 \strokec4 :\cb1 \
\cb3             \cf7 \strokec7 # Directly use the hardcoded file name\cf0 \cb1 \strokec4 \
\cb3             file_name = \cf5 \strokec5 'GreatDepression.pdf'\cf0 \cb1 \strokec4 \
\cb3             \cf7 \strokec7 # Fetch the PDF data from storage\cf0 \cb1 \strokec4 \
\cb3             pdf_data_io = get_pdf_data_from_storage(file_name)\cb1 \
\cb3             \cf7 \strokec7 # Extract text from the PDF\cf0 \cb1 \strokec4 \
\cb3             text = extract_pdf_text(pdf_data_io)\cb1 \
\cb3             topic = \cf5 \strokec5 "The impact of Keynesian economics on the Great Depression"\cf0 \cb1 \strokec4 \
\cb3             \cf7 \strokec7 # topic = "The Indo-Europeans, and their diverse languages, cultures, and living locations"\cf0 \cb1 \strokec4 \
\cb3             \cb1 \
\cb3             messages = []\cb1 \
\cb3             quiz_outline_response = generate_quiz_and_outline(messages, text)\cb1 \
\cb3             \cf7 \strokec7 # Elaborate on the topic\cf0 \cb1 \strokec4 \
\cb3             elaboration_response = elaborate_on_topic(topic, messages)\cb1 \
\cb3             \cf7 \strokec7 # Create a JSON object with separate sections\cf0 \cb1 \strokec4 \
\cb3             response_json = \{\cb1 \
\cb3                 \cf5 \strokec5 "GreatDepressionQuizOutline"\cf0 \strokec4 : quiz_outline_response,\cb1 \
\cb3                 \cf5 \strokec5 "GreatDepressionElaboration"\cf0 \strokec4 : elaboration_response\cb1 \
\cb3             \}\cb1 \
\
\cb3             \cf2 \strokec2 return\cf0 \strokec4  response_json\cb1 \
\cb3     \cb1 \
\cb3     \cf2 \strokec2 except\cf0 \strokec4  Exception \cf2 \strokec2 as\cf0 \strokec4  e:\cb1 \
\cb3         error_message = f\cf5 \strokec5 "Error processing request: \{e\}"\cf0 \cb1 \strokec4 \
\cb3         \cf2 \strokec2 print\cf0 \strokec4 (error_message)\cb1 \
\cb3         \cf2 \strokec2 return\cf0 \strokec4  make_response(jsonify(\{\cf5 \strokec5 "error"\cf0 \strokec4 : error_message\}), \cf8 \strokec8 500\cf0 \strokec4 )\cb1 \
\
\
}